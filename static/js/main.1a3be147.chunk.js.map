{"version":3,"sources":["stablog_logo_256x256.png","static/windows.svg","static/mac.svg","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Base","state","showMenu","handleClick","setState","handleClickItem","className","src","logo","target","href","svg_logo_window","svg_logo_mac","width","height","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,kD,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,iC,+OCQtBC,G,iNACnBC,MAAQ,CACNC,UAAU,G,EAGZC,YAAc,WACZ,EAAKC,SAAS,CACZF,UAAU,K,EAGdG,gBAAkB,WAChB,EAAKD,SAAS,CACZF,UAAU,K,wEAKZ,OACE,yBAAKI,UAAU,QAEb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SAAf,sBACA,yBAAKA,UAAU,UAAf,gEACA,yBAAKA,UAAU,QAAf,+FACA,yBAAKA,UAAU,QACb,yBAAKC,IAAKC,OAEZ,6BACE,yBAAKF,UAAU,sBACb,uBAAGA,UAAU,kBAAkBG,OAAO,SAASC,KAAK,wDAClD,yBAAKJ,UAAU,uBAAuBC,IAAKI,MAD7C,iBAGA,uBAAGL,UAAU,kBAAkBG,OAAO,SAASC,KAAK,wDAClD,yBAAKJ,UAAU,uBAAuBC,IAAKK,MAD7C,iBAOR,yBAAKN,UAAU,UACb,yBAAKA,UAAU,WACb,uBAAGA,UAAU,MAAMI,KAAK,uCAAuCD,OAAO,UAAtE,4BACA,uBAAGH,UAAU,MAAMI,KAAK,IAAxB,4BACA,uBAAGJ,UAAU,MAAMI,KAAK,8CAA8CD,OAAO,UAA7E,8BAGJ,uBAAGC,KAAK,yBAAyBJ,UAAU,qBACzC,yBACEO,MAAM,QAAQC,OAAO,QAAQP,IAAI,gGAAgGQ,IAAI,4B,GAjD/GC,cCIdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a3be147.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stablog_logo_256x256.899da545.png\";","module.exports = __webpack_public_path__ + \"static/media/windows.185acfd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/mac.7ca102d4.svg\";","import React, { Component } from 'react'\nimport logo from './stablog_logo_256x256.png'\nimport svg_logo_window from './static/windows.svg'\nimport svg_logo_mac from './static/mac.svg'\nimport backgroundSvg from './background.svg'\n\nimport './App.less'\n\nexport default class Base extends Component {\n  state = {\n    showMenu: false,\n  }\n\n  handleClick = () => {\n    this.setState({\n      showMenu: true,\n    })\n  }\n  handleClickItem = () => {\n    this.setState({\n      showMenu: false,\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"Home\">\n\n        <div className=\"body\">\n          <div className=\"container\">\n            <div className=\"title\">稳部落</div>\n            <div className=\"slogan\">专业导出备份微博记录</div>\n            <div className=\"desc\">一键导出指定用户的所有微博&文章</div>\n            <div className=\"logo\">\n              <img src={logo} />\n            </div>\n            <div>\n              <div className=\"download-container\">\n                <a className=\"download-button\" target=\"_blank\" href=\"https://dl.motrix.app/release/Motrix-Setup-1.4.1.exe\">\n                  <img className=\"download-button-icon\" src={svg_logo_window} />Windows版\n                </a>\n                <a className=\"download-button\" target=\"_blank\" href=\"https://dl.motrix.app/release/Motrix-Setup-1.4.1.exe\">\n                  <img className=\"download-button-icon\" src={svg_logo_mac} />Mac版\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <div className=\"comment\">\n            <a className=\"tip\" href=\"https://github.com/YaoZeyuan/stablog\" target=\"_blank\">使用指南</a>\n            <a className=\"tip\" href=\"\">致谢列表</a>\n            <a className=\"tip\" href=\"https://github.com/YaoZeyuan/stablog/issues\" target=\"_blank\">功能建议</a>\n          </div>\n        </div>\n        <a href=\"https://github.com/you\" className=\"fork-me-on-github\">\n          <img\n            width=\"149px\" height=\"149px\" src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_green_007200.png?resize=149%2C149\" alt=\"Fork me on GitHub\" />\n        </a>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}