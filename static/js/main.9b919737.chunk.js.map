{"version":3,"sources":["stablog_logo_256x256.png","static/windows.svg","static/mac.svg","App.tsx","serviceWorker.js","index.tsx"],"names":["module","exports","Base","state","showThankList","config","downloadUrl","releaseAt","releaseNote","version","detail","windows","url","mac","thankList","reason","time","toggleThankList","setState","alert","axios","get","versionResponse","thankListResponse","data","this","thankEleList","counter","item","index","itemEle","key","className","push","href","target","src","logo","onClick","showAlert","svg_logo_window","svg_logo_mac","CSSTransition","in","timeout","classNames","unmountOnExit","width","height","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kD,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,4SCQtBC,G,iNACnBC,MAAQ,CACNC,eAAe,EACfC,OAAQ,CACNC,YAAa,4EACbC,UAAW,6BACXC,YAAa,qDACbC,QAAS,IACTC,OAAQ,CACNC,QAAS,CAAEF,QAAS,IAAKG,IAAK,iFAC9BC,IAAK,CAAEJ,QAAS,IAAKG,IAAK,yEAG9BE,UAAW,CAAC,CAAEC,OAAQ,0CAAaC,KAAM,sB,EAkB3CC,gBAAkB,WAChB,EAAKC,SAAS,CACZd,eAAgB,EAAKD,MAAMC,iB,2EAhB7Be,MAAM,4H,gLAIsBC,IAAMC,IAAI,8C,cAAlCC,E,gBAC0BF,IAAMC,IAAI,qD,OAApCE,E,OACAlB,EAASiB,EAAgBE,KACzBV,EAAYS,EAAkBC,KAClCC,KAAKP,SAAS,CACZb,SACAS,c,qIAUM,IAAD,EACsCW,KAAKtB,MAA1CE,EADD,EACCA,OAAQS,EADT,EACSA,UACZY,GAFG,EACoBtB,cACR,IACfuB,EAAU,EAHP,uBAIP,YAAiBb,EAAjB,+CAA4B,CAAC,IAApBc,EAAmB,QACtBC,EAAQF,EACRG,EACF,yBAAKC,IAAKF,EAAOG,UAAU,mBACzB,yBAAKA,UAAU,wBAAwBJ,EAAKZ,MAC5C,yBAAKgB,UAAU,0BAA0BJ,EAAKb,SAGlDW,EAAaO,KAAKH,GAClBH,KAbK,kFAeP,OACE,yBAAKK,UAAU,QACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,SAAf,sBACA,yBAAKA,UAAU,UAAf,gEACA,yBAAKA,UAAU,QACb,gJAEF,yBAAKA,UAAU,QACb,6HAEF,yBAAKA,UAAU,QACb,+DAAY3B,EAAOI,UAErB,yBAAKuB,UAAU,QAAf,4GACA,yBAAKA,UAAU,QAAf,yFAEE,uBAAGE,KAAK,iCAAiCC,OAAO,UAAhD,gBAFF,8BAOA,yBAAKH,UAAU,QACb,yBAAKI,IAAKC,OAEZ,yBAAKL,UAAU,sBACb,yBAAKA,UAAU,gBACb,8CAEF,yBAAKA,UAAU,eACb,uBACEA,UAAU,kBACVG,OAAO,SAEPG,QAASb,KAAKc,WAEd,yBAAKP,UAAU,uBAAuBI,IAAKI,MAC3C,+CAEF,uBACER,UAAU,kBACVG,OAAO,SAEPG,QAASb,KAAKc,WAEd,yBAAKP,UAAU,uBAAuBI,IAAKK,MAC3C,+CAMV,yBAAKT,UAAU,UACb,yBAAKA,UAAU,WACb,uBAAGA,UAAU,MAAME,KAAK,uCAAuCC,OAAO,UAAtE,4BAGA,uBAAGH,UAAU,MAAMM,QAASb,KAAKR,iBAAjC,4BAGA,uBAAGe,UAAU,MAAME,KAAK,8CAA8CC,OAAO,UAA7E,6BAIF,kBAACO,EAAA,EAAD,CAAeC,GAAIlB,KAAKtB,MAAMC,cAAewC,QAAS,IAAKC,WAAW,OAAOC,eAAa,GACxF,yBAAKd,UAAU,cAAcN,KAGjC,uBAAGQ,KAAK,uCAAuCF,UAAU,oBAAoBG,OAAO,UAClF,yBACEY,MAAM,QACNC,OAAO,QACPZ,IAAI,gGACJa,IAAI,4B,GA9HkBC,cCIdC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.9b919737.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/stablog_logo_256x256.899da545.png\";","module.exports = __webpack_public_path__ + \"static/media/windows.185acfd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/mac.7ca102d4.svg\";","import React, { Component } from 'react'\nimport logo from './stablog_logo_256x256.png'\nimport svg_logo_window from './static/windows.svg'\nimport svg_logo_mac from './static/mac.svg'\nimport { CSSTransition } from 'react-transition-group'\nimport axios from 'axios'\nimport './App.less'\n\nexport default class Base extends Component {\n  state = {\n    showThankList: false,\n    config: {\n      downloadUrl: 'https://github.com/YaoZeyuan/stablog#%E8%BD%AF%E4%BB%B6%E4%B8%8B%E8%BD%BD',\n      releaseAt: '2019年10月22日',\n      releaseNote: '稳部落1.1.0, 闪亮发布.',\n      version: 1.1,\n      detail: {\n        windows: { version: 1.1, url: 'http://stablog.bookflaneur.cn/%E7%A8%B3%E9%83%A8%E8%90%BD%20Setup%201.1.0.exe' },\n        mac: { version: 1.1, url: 'http://stablog.bookflaneur.cn/%E7%A8%B3%E9%83%A8%E8%90%BD-1.1.0.dmg' },\n      },\n    },\n    thankList: [{ reason: '*明明捐助了25元', time: '2019-10-14 21:34' }],\n  }\n\n  showAlert() {\n    alert('抱歉, 为规避法律风险, 已移除稳部落下载链接')\n  }\n\n  async componentDidMount() {\n    let versionResponse = await axios.get('https://api.bookflaneur.cn/stablog/version')\n    let thankListResponse = await axios.get('https://api.bookflaneur.cn/stablog/thank_you/list')\n    let config = versionResponse.data\n    let thankList = thankListResponse.data\n    this.setState({\n      config,\n      thankList,\n    })\n  }\n\n  toggleThankList = () => {\n    this.setState({\n      showThankList: !this.state.showThankList,\n    })\n  }\n\n  render() {\n    const { config, thankList, showThankList } = this.state\n    let thankEleList = []\n    let counter = 0\n    for (let item of thankList) {\n      let index = counter\n      let itemEle = (\n        <div key={index} className=\"thank-list-item\">\n          <div className=\"thank-list-item-time\">{item.time}</div>\n          <div className=\"thank-list-item-reason\">{item.reason}</div>\n        </div>\n      )\n      thankEleList.push(itemEle)\n      counter++\n    }\n    return (\n      <div className=\"Home\">\n        <div className=\"body\">\n          <div className=\"container\">\n            <div className=\"title\">稳部落</div>\n            <div className=\"slogan\">专业备份导出微博记录</div>\n            <div className=\"desc\">\n              <del>支持被封用户(需使用被封用户原账号登陆)</del>\n            </div>\n            <div className=\"desc\">\n              <del>一键导出指定用户的所有微博&文章</del>\n            </div>\n            <div className=\"desc\">\n              <del>最新版本：v{config.version}</del>\n            </div>\n            <div className=\"desc\">为规避法律风险, 已移除稳部落下载链接</div>\n            <div className=\"desc\">\n              如有规避方案, 烦请微博私信联系\n              <a href=\"https://weibo.com/u/1718734760\" target=\"_blank\">\n                @yaozeyuan93\n              </a>\n              , 不胜感激\n            </div>\n            <div className=\"logo\">\n              <img src={logo} />\n            </div>\n            <div className=\"download-container\">\n              <div className=\"download-tip\">\n                <del>下载</del>\n              </div>\n              <div className=\"action-line\">\n                <a\n                  className=\"download-button\"\n                  target=\"_blank\"\n                  // href={config.detail.windows.url}\n                  onClick={this.showAlert}\n                >\n                  <img className=\"download-button-icon\" src={svg_logo_window} />\n                  <del>Windows版</del>\n                </a>\n                <a\n                  className=\"download-button\"\n                  target=\"_blank\"\n                  // href={config.detail.mac.url}\n                  onClick={this.showAlert}\n                >\n                  <img className=\"download-button-icon\" src={svg_logo_mac} />\n                  <del>Mac版</del>\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"footer\">\n          <div className=\"comment\">\n            <a className=\"tip\" href=\"https://github.com/YaoZeyuan/stablog\" target=\"_blank\">\n              使用指南\n            </a>\n            <p className=\"tip\" onClick={this.toggleThankList}>\n              致谢列表\n            </p>\n            <a className=\"tip\" href=\"https://github.com/YaoZeyuan/stablog/issues\" target=\"_blank\">\n              功能建议\n            </a>\n          </div>\n          <CSSTransition in={this.state.showThankList} timeout={300} classNames=\"fade\" unmountOnExit>\n            <div className=\"thank-list\">{thankEleList}</div>\n          </CSSTransition>\n        </div>\n        <a href=\"https://github.com/YaoZeyuan/stablog\" className=\"fork-me-on-github\" target=\"_blank\">\n          <img\n            width=\"149px\"\n            height=\"149px\"\n            src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_green_007200.png?resize=149%2C149\"\n            alt=\"Fork me on GitHub\"\n          />\n        </a>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}